배열
 - 한 번 생성하면 길이를 변경할 수 없다.(고정길이 데이터 구조)
 - 더 많은 저장공간이 필요
 - 배열 복사
 - ENUM(열거타입)
 - Calendar 클래스 활용 방법 숙지하기.

 클래스
 - 객체지향 프로그래밍
 - 객체와 클래스
 - 클래스 선언
 - 객체 생성과 클래스 변수
 - 클래스의 구성멤버
 - 필드 선언과 사용
 - 생성자 선언 과 호출(생성자 오버로딩)
 - 메소드 선언과 호출
 - 패키지
 - 접근제한자(public,protected,default,private)
 - Setter() & Getter() (public 이어야 함)
 ------------------------
 필드(클래스에 정의된 멤버변수) 와
 - 인스턴스 멤버 : 객체 생성(new)후 사용할 수 있다.
 - 정적 멤버
 - final 필드 와 상수
 - 싱클톤 패턴
 - 빌더 패턴


 Q1. 클래스를 사용하는 시점에서 딱 한번 메모리에 로딩하기 위해서 사용하는 키워드는 무엇인가?
 A.

 Q2.
 A.

 Q3.
 A.

 Q4.
 A.

 Q5.
 A.

 싱글톤(SingleTon) 패턴(Pattern)이란?
 애플리케이션 전체에서 단 한 객체만 생성해서 사용한다.
 핵심은 생성자를 private 접근 제한해서 외부에서 new연산자로 생성자로 호출할 수 없도록 막는 방법.
 private 클래스 () {} -> new x

 - 생성자를 호출할 수가 없으나 외부에서 마음대로 객체를 생성이 불가능하다.
 대신 싱글톤 패턴이 제공하는 정적메소드를 통해서 간접적으로 객체를 얻을 수 있게 한다.
 Calendar.getInstance()

 * SingleTOn Pattern 공식

 public class 클래스{

 private class 클래스 singleton = new 클래스(){} // private 접근 권한을 갖는 정적 필드(singleton) 선언 및 초기화

 private 클래스() {}// private 접근 권한을 갖는 생성자 선언 : 외부 객체 생성 불가


 public static 클래스 getInstance(){  // 외부에서 객체를 얻는 유일한 방법은 getInstance() 메소드를 호출하는 것이다.
 // 정적필드(singleton)값을 리턴하는 getInstance() 정적 메소드를 public선언하여 외부에서 해당 객체를 간접적으로 얻을 수 있도록 만듬
 return singleton;
 }

 }