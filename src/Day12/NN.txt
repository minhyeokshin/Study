배열
 - 한 번 생성하면 길이를 변경할 수 없다.(고정길이 데이터 구조)
 - 더 많은 저장공간이 필요
 - 배열 복사
 - ENUM(열거타입)
 - Calendar 클래스 활용 방법 숙지하기.

 클래스
 - 객체지향 프로그래밍
 - 객체와 클래스
 - 클래스 선언
 - 객체 생성과 클래스 변수
 - 클래스의 구성멤버
 - 필드 선언과 사용
 - 생성자 선언 과 호출(생성자 오버로딩)
 - 메소드 선언과 호출
 - 패키지
 - 접근제한자(public,protected,default,private)
 - Setter() & Getter() (public 이어야 함)
 ------------------------
 필드(클래스에 정의된 멤버변수) 와
 - 인스턴스 멤버 : 객체 생성(new)후 사용할 수 있다.
 - 정적 멤버
 - final 필드 와 상수
 - 싱클톤 패턴
 - 빌더 패턴


 Q1. 클래스를 사용하는 시점에서 딱 한번 메모리에 로딩하기 위해서 사용하는 키워드는 무엇인가?
 A.

 Q2.
 A.

 Q3.
 A.

 Q4.
 A.

 Q5.
 A.

 싱글톤(SingleTon) 패턴(Pattern)이란?
 애플리케이션 전체에서 단 한 객체만 생성해서 사용한다.
 핵심은 생성자를 private 접근 제한해서 외부에서 new연산자로 생성자로 호출할 수 없도록 막는 방법.
 private 클래스 () {} -> new x

 - 생성자를 호출할 수가 없으나 외부에서 마음대로 객체를 생성이 불가능하다.
 대신 싱글톤 패턴이 제공하는 정적메소드를 통해서 간접적으로 객체를 얻을 수 있게 한다.
 Calendar.getInstance()

 * SingleTOn Pattern 공식

 public class 클래스{

 private class 클래스 singleton = new 클래스(){} // private 접근 권한을 갖는 정적 필드(singleton) 선언 및 초기화

 private 클래스() {}// private 접근 권한을 갖는 생성자 선언 : 외부 객체 생성 불가


 public static 클래스 getInstance(){  // 외부에서 객체를 얻는 유일한 방법은 getInstance() 메소드를 호출하는 것이다.
 // 정적필드(singleton)값을 리턴하는 getInstance() 정적 메소드를 public선언하여 외부에서 해당 객체를 간접적으로 얻을 수 있도록 만듬
 return singleton;
 }

 }


 디자인패턴중에서 가장 개념이 간단한 패턴

 - 왜 싱클톤 패턴을 쓸까? 메모리 절약을 위해, 인스턴스가 필요할때 똑같은 인스턴스를 새로만들지 말고, 기존의 인스턴스를 가져와서 활용하는 기법이다.

 - 어떨때 적용하면 좋을까? 그 객체가 리소스를 많이 차지하는 역할, 무거운 클래스를 설계할때 적용(데이터베이스 연결 모듈)
    (데이터베이스 연결 모듈, 디스크 연결, 네트워크 통신, DBCP 컨넥션 풀, 스레드 풀, 캐시, 로그 기록 객체 운영)

싱글톤 패턴 구현 기법 종류
어떤 목적을 구현하기 위한 코드 : 가장 최적화된 패턴을 상황에 맞게 사용하는 것이핵심
싱글톤 패턴을 구현할때 대표적인 코드 기법 7가지
1. Eager Initialization
    한번만 미리 만들어두는, 가장 직관적이면서도 심플한 기법(Eager = keep)
2. Static block initialization
    클래스가 로딩되고 클래스 변수가 준비된 후 자동으로 실행되는 블럭
    static { }
3. Lazy initialization
    객체 생성에 대한 관리를 내부적으로 처리
    메서드를 호출했을때 인스턴스 변수의 null 유무에 따라 초기화 하거나 있는 걸 반환하는 기법
    Thread Safe 하지 않은 단점이 있다.
4. Thread safe initialization

5. Double-Checked-Locking(volatile)

6. Bill Pugh Solution(Lazy Holder)

7. Enum 이용


싱글톤의 문제점
1. 모듈간의 의존성이 높아진다.
2. SOLID 원칙 : 객체지향 프로그래밍이 지향하는 원칙 (* Study해야함)
3. TDD (테스트 주도 개발)


상속 개념정리
객체 지향 프로그램관점 상속의 의미
이미 잘 개발된 클래스를 재사용하여 새로운 클래스를 만들기 때문에
중복되는 코드를 줄이고 개발시간을 단축 시킬수 있다.